/*
 * Hello World Service
 *
 * Hello World service with support for multiple languages.
 *
 * API version: 1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"encoding/json"
	"github.com/CiscoDevNet/msx-examples/go-hello-world-service-9/internal/config"
	"github.com/CiscoDevNet/msx-examples/go-hello-world-service-9/internal/stream"
	"log"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A LanguagesApiController binds http requests to an api service and writes the service results to the http response
type LanguagesApiController struct {
	service LanguagesApiServicer
	kafkaClient stream.KafkaService
	config *config.Config
}

// NewLanguagesApiController creates a default api controller
func NewLanguagesApiController(s LanguagesApiServicer) Router {
	kClient, err := stream.NewKafkaService(context.Background())
	if err != nil {
		log.Println("Failed to Create Kafka Client ", err)
	}
	return &LanguagesApiController{ service: s, kafkaClient: kClient, config: config.ReadConfig()}
}

// Routes returns all of the api route for the LanguagesApiController
func (c *LanguagesApiController) Routes() Routes {
	return Routes{ 
		{
			"CreateLanguage",
			strings.ToUpper("Post"),
			"/helloworld/api/v1/languages",
			c.CreateLanguage,
			"HELLOWORLD_WRITE_LANGUAGE",
		},
		{
			"DeleteLanguage",
			strings.ToUpper("Delete"),
			"/helloworld/api/v1/languages/{id}",
			c.DeleteLanguage,
			"HELLOWORLD_WRITE_LANGUAGE",
		},
		{
			"GetLanguage",
			strings.ToUpper("Get"),
			"/helloworld/api/v1/languages/{id}",
			c.GetLanguage,
			"HELLOWORLD_READ_LANGUAGE",
		},
		{
			"GetLanguages",
			strings.ToUpper("Get"),
			"/helloworld/api/v1/languages",
			c.GetLanguages,
			"HELLOWORLD_READ_LANGUAGE",
		},
		{
			"UpdateLanguage",
			strings.ToUpper("Put"),
			"/helloworld/api/v1/languages/{id}",
			c.UpdateLanguage,
			"HELLOWORLD_WRITE_LANGUAGE",
		},
	}
}

// CreateLanguage - Creates a new langauge.
func (c *LanguagesApiController) CreateLanguage(w http.ResponseWriter, r *http.Request) { 
	language := &Language{}
	if err := json.NewDecoder(r.Body).Decode(&language); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.CreateLanguage(r.Context(), *language)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}

	errors := []error{}
	produceTopics := c.config.Kafka.Topics.Produce
	for _, topic := range produceTopics {
		err := c.kafkaClient.Produce(language.Name + " " + language.Description, topic)
		if err != nil {
			errors = append(errors, err)
		}
	}
	if len(errors) > 0 {
		var statusCode = http.StatusBadRequest
		EncodeJSONResponse(errors, &statusCode, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteLanguage - Deletes a langauge.
func (c *LanguagesApiController) DeleteLanguage(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.DeleteLanguage(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetLanguage - Returns a language.
func (c *LanguagesApiController) GetLanguage(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.GetLanguage(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// GetLanguages - Returns a list of languages.
func (c *LanguagesApiController) GetLanguages(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetLanguages(r.Context())
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}

// UpdateLanguage - Updates a langauge.
func (c *LanguagesApiController) UpdateLanguage(w http.ResponseWriter, r *http.Request) { 
	params := mux.Vars(r)
	id := params["id"]
	language := &Language{}
	if err := json.NewDecoder(r.Body).Decode(&language); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}
	
	result, err := c.service.UpdateLanguage(r.Context(), id, *language)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
	
}
