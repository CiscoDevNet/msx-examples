/*
 * Hello World Service
 *
 * Hello World service with support for multiple languages.
 *
 * API version: 1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"log"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// A ItemsApiController binds http requests to an api service and writes the service results to the http response
type ItemsApiController struct {
	service ItemsApiServicer
}

// NewItemsApiController creates a default api controller
func NewItemsApiController(s ItemsApiServicer) Router {
	return &ItemsApiController{service: s}
}

// Routes returns all of the api route for the ItemsApiController
func (c *ItemsApiController) Routes() Routes {
	return Routes{
		{
			"CreateItem",
			strings.ToUpper("Post"),
			"/slminitproof/api/v1/items",
			c.CreateItem,
		},
		{
			"DeleteItem",
			strings.ToUpper("Delete"),
			"/slminitproof/api/v1/items/{id}",
			c.DeleteItem,
		},
		{
			"GetItem",
			strings.ToUpper("Get"),
			"/slminitproof/api/v1/items/{id}",
			c.GetItem,
		},
		{
			"GetItems",
			strings.ToUpper("Get"),
			"/slminitproof/api/v1/items",
			c.GetItems,
		},
		{
			"UpdateItem",
			strings.ToUpper("Put"),
			"/slminitproof/api/v1/items/{id}",
			c.UpdateItem,
		},
	}
}

// CreateItem - Creates a new Hello World item.
func (c *ItemsApiController) CreateItem(w http.ResponseWriter, r *http.Request) {
	item := &Item{}
	if err := json.NewDecoder(r.Body).Decode(&item); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.CreateItem(r.Context(), *item)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteItem - Deletes a Hello World item.
func (c *ItemsApiController) DeleteItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.DeleteItem(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetItem - Returns a Hello World item.
func (c *ItemsApiController) GetItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id := params["id"]
	result, err := c.service.GetItem(r.Context(), id)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetItems - Returns a list of Hello World items.
func (c *ItemsApiController) GetItems(w http.ResponseWriter, r *http.Request) {
	log.Printf("ItemsApiController GetItems")
	query := r.URL.Query()
	languageId := query.Get("languageId")
	result, err := c.service.GetItems(r.Context(), languageId)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateItem - Updates a Hello World item.
func (c *ItemsApiController) UpdateItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	id := params["id"]
	item := &Item{}
	if err := json.NewDecoder(r.Body).Decode(&item); err != nil {
		w.WriteHeader(http.StatusBadRequest)
		return
	}

	result, err := c.service.UpdateItem(r.Context(), id, *item)
	//If an error occured, encode the error with the status code
	if err != nil {
		EncodeJSONResponse(err.Error(), &result.Code, w)
		return
	}
	//If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
