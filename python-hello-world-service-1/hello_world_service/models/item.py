# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from hello_world_service.models.base_model_ import Model
from hello_world_service import util


class Item(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, language_id=None, language_name=None, value=None):  # noqa: E501
        """Item - a model defined in OpenAPI

        :param id: The id of this Item.  # noqa: E501
        :type id: str
        :param language_id: The language_id of this Item.  # noqa: E501
        :type language_id: str
        :param language_name: The language_name of this Item.  # noqa: E501
        :type language_name: str
        :param value: The value of this Item.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'id': str,
            'language_id': str,
            'language_name': str,
            'value': str
        }

        self.attribute_map = {
            'id': 'id',
            'language_id': 'languageId',
            'language_name': 'languageName',
            'value': 'value'
        }

        self._id = id
        self._language_id = language_id
        self._language_name = language_name
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Item':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Item of this Item.  # noqa: E501
        :rtype: Item
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Item.


        :return: The id of this Item.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Item.


        :param id: The id of this Item.
        :type id: str
        """

        self._id = id

    @property
    def language_id(self):
        """Gets the language_id of this Item.


        :return: The language_id of this Item.
        :rtype: str
        """
        return self._language_id

    @language_id.setter
    def language_id(self, language_id):
        """Sets the language_id of this Item.


        :param language_id: The language_id of this Item.
        :type language_id: str
        """
        if language_id is None:
            raise ValueError("Invalid value for `language_id`, must not be `None`")  # noqa: E501

        self._language_id = language_id

    @property
    def language_name(self):
        """Gets the language_name of this Item.


        :return: The language_name of this Item.
        :rtype: str
        """
        return self._language_name

    @language_name.setter
    def language_name(self, language_name):
        """Sets the language_name of this Item.


        :param language_name: The language_name of this Item.
        :type language_name: str
        """

        self._language_name = language_name

    @property
    def value(self):
        """Gets the value of this Item.


        :return: The value of this Item.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Item.


        :param value: The value of this Item.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501
        if value is not None and len(value) > 128:
            raise ValueError("Invalid value for `value`, length must be less than or equal to `128`")  # noqa: E501
        if value is not None and len(value) < 2:
            raise ValueError("Invalid value for `value`, length must be greater than or equal to `2`")  # noqa: E501

        self._value = value
